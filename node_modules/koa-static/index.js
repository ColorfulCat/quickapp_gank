
'use strict';

/**
 * Module dependencies.
 */

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var debug = require('debug')('koa-static');

var _require = require('path'),
    resolve = _require.resolve;

var assert = require('assert');
var send = require('koa-send');

/**
 * Expose `serve()`.
 */

module.exports = serve;

/**
 * Serve static files from `root`.
 *
 * @param {String} root
 * @param {Object} [opts]
 * @return {Function}
 * @api public
 */

function serve(root, opts) {
  opts = Object.assign({}, opts);

  assert(root, 'root directory is required to serve files');

  // options
  debug('static "%s" %j', root, opts);
  opts.root = resolve(root);
  if (opts.index !== false) opts.index = opts.index || 'index.html';

  if (!opts.defer) {
    return function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(ctx, next) {
        var done;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                done = false;

                if (!(ctx.method === 'HEAD' || ctx.method === 'GET')) {
                  _context.next = 12;
                  break;
                }

                _context.prev = 2;
                _context.next = 5;
                return send(ctx, ctx.path, opts);

              case 5:
                done = _context.sent;
                _context.next = 12;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context['catch'](2);

                if (!(_context.t0.status !== 404)) {
                  _context.next = 12;
                  break;
                }

                throw _context.t0;

              case 12:
                if (done) {
                  _context.next = 15;
                  break;
                }

                _context.next = 15;
                return next();

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 8]]);
      }));

      function serve(_x, _x2) {
        return _ref.apply(this, arguments);
      }

      return serve;
    }();
  }

  return function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(ctx, next) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return next();

            case 2:
              if (!(ctx.method !== 'HEAD' && ctx.method !== 'GET')) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt('return');

            case 4:
              if (!(ctx.body != null || ctx.status !== 404)) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt('return');

            case 6:
              _context2.prev = 6;
              _context2.next = 9;
              return send(ctx, ctx.path, opts);

            case 9:
              _context2.next = 15;
              break;

            case 11:
              _context2.prev = 11;
              _context2.t0 = _context2['catch'](6);

              if (!(_context2.t0.status !== 404)) {
                _context2.next = 15;
                break;
              }

              throw _context2.t0;

            case 15:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this, [[6, 11]]);
    }));

    function serve(_x3, _x4) {
      return _ref2.apply(this, arguments);
    }

    return serve;
  }();
}