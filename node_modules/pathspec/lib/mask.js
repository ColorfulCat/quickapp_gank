// Generated by CoffeeScript 1.3.3
(function() {
  var FSMask, FSTrivialMask, FSWildcardMask, RegExp_escape,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RegExp_escape = require('./util').RegExp_escape;

  FSMask = (function() {

    function FSMask() {}

    return FSMask;

  })();

  FSTrivialMask = (function(_super) {

    __extends(FSTrivialMask, _super);

    function FSTrivialMask(name) {
      this.name = name;
    }

    FSTrivialMask.prototype.matches = function(candidate) {
      return candidate === this.name;
    };

    FSTrivialMask.prototype.toString = function() {
      return this.name;
    };

    return FSTrivialMask;

  })(FSMask);

  FSWildcardMask = (function(_super) {

    __extends(FSWildcardMask, _super);

    function FSWildcardMask(wildcard) {
      var p, parts;
      if (typeof wildcard === 'string') {
        this.wildcard = wildcard;
        parts = wildcard.split('*');
      } else {
        parts = wildcard;
        this.wildcard = parts.join('*');
      }
      this.len = ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          p = parts[_i];
          _results.push(p.length);
        }
        return _results;
      })()).reduce(function(a, b) {
        return a + b;
      });
      this.regexp = new RegExp('^' + ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          p = parts[_i];
          _results.push(RegExp_escape(p));
        }
        return _results;
      })()).join('.*?') + '$');
    }

    FSWildcardMask.prototype.matches = function(candidate) {
      return candidate.length >= this.len && this.regexp.test(candidate);
    };

    FSWildcardMask.prototype.toString = function() {
      return this.wildcard;
    };

    return FSWildcardMask;

  })(FSMask);

  FSMask.parse = function(wildcard) {
    if (wildcard.indexOf('*') >= 0) {
      return new FSWildcardMask(wildcard);
    } else {
      return new FSTrivialMask(wildcard);
    }
  };

  module.exports = FSMask;

}).call(this);
