// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, Path, RelPathList, TreeStream, createLineStream, createStdinFileStream, fs, usage,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Path = require('path');

  fs = require('fs');

  EventEmitter = require('events').EventEmitter;

  RelPathList = require('./relpathlist');

  TreeStream = require('./treestream');

  usage = function() {
    process.stderr.write("" + "Similar to find(1), but uses pathspec.js for filtering.\n\n" + "Usage: pathspec-find [-v|--verbose] /path/to/dir spec1 spec2...\n" + "   or: pathspec-find [-v|--verbose] - spec1 spec2...\n\n" + "The first argument is the folder to look in. Pass a single dash ('-') to read the list of\n" + "files from stdin, one path per line.\n\n" + "The remaining arguments are .gitignore-style masks. At least one is required.\n\n" + "Examples:\n" + "    pathspec-find . '*.json'\n" + "    find . | pathspec-find - '*.json' '!excluded/folder'\n\n" + "(C) 2012, Andrey Tarantsov -- https://github.com/andreyvit/pathspec.js\n\n");
    return process.exit(41);
  };

  createLineStream = require('./util/linestream');

  createStdinFileStream = function(list) {
    var result, stream;
    result = new EventEmitter();
    stream = createLineStream(process.stdin);
    stream.on('line', function(line) {
      if (list.matches(line)) {
        return result.emit('file', line);
      }
    });
    stream.on('end', function() {
      return result.emit('end');
    });
    process.stdin.resume();
    return result;
  };

  module.exports = function(argv) {
    var absolute, list, rootPath, stream, verbose;
    if (argv.length < 2 || __indexOf.call(argv, '--help') >= 0) {
      usage();
    }
    verbose = false;
    absolute = false;
    argv = argv.filter(function(arg) {
      if (arg === '-v' || arg === '--verbose') {
        verbose = true;
        return false;
      }
      if (arg === '-a' || arg === '--absolute') {
        absolute = true;
        return false;
      }
      return true;
    });
    rootPath = argv.shift();
    list = RelPathList.parse(argv);
    if (verbose) {
      process.stderr.write("Path List: " + list + "\n");
    }
    if (rootPath === '-') {
      stream = createStdinFileStream(list);
    } else {
      if (!fs.statSync(rootPath)) {
        process.stderr.write("Root path does not exist: " + rootPath + "\n");
        process.exit(2);
      }
      stream = new TreeStream(list).visit(rootPath);
    }
    stream.on('file', function(path, absPath) {
      var o;
      o = (absolute ? absPath : path);
      return process.stdout.write("" + o + "\n");
    });
    if (verbose) {
      stream.on('folder', function(path, absPath) {
        var o;
        o = (absolute ? absPath : path);
        return process.stderr.write("Folder: " + o + "/\n");
      });
    }
    return stream.on('error', function(err) {
      process.stderr.write("Error: " + (err.stack || err.message || err) + "\n");
      return process.exit(1);
    });
  };

}).call(this);
