// Generated by CoffeeScript 1.3.3
(function() {
  var RelPathList, RelPathSpec,
    __slice = [].slice;

  RelPathSpec = require('./relpathspec');

  RelPathList = (function() {

    function RelPathList() {
      this.specs = [];
    }

    RelPathList.prototype.include = function(spec) {
      if (spec instanceof RelPathList) {
        this.specs.push.apply(this.specs, spec.specs);
      } else {
        this.specs.push([true, spec]);
      }
      return this;
    };

    RelPathList.prototype.exclude = function(spec) {
      if (spec instanceof RelPathList) {
        throw new Error("Cannot exclude a list");
      }
      this.specs.push([false, spec]);
      return this;
    };

    RelPathList.prototype.membership = function(path, isDir) {
      var answer, isIncluded, spec, _i, _len, _ref, _ref1;
      answer = null;
      _ref = this.specs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], isIncluded = _ref1[0], spec = _ref1[1];
        if (spec.matches(path, isDir)) {
          answer = isIncluded;
        }
      }
      return answer;
    };

    RelPathList.prototype.matches = function(path, isDir) {
      return this.membership(path, isDir) === true;
    };

    RelPathList.prototype.excludes = function(path, isDir) {
      return this.membership(path, isDir) === false;
    };

    RelPathList.prototype.toString = function() {
      var isIncluded, spec;
      return ((function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.specs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], isIncluded = _ref1[0], spec = _ref1[1];
          _results.push((isIncluded ? '' : '!') + spec);
        }
        return _results;
      }).call(this)).join(" ");
    };

    return RelPathList;

  })();

  RelPathList.union = function() {
    var list, lists, result, _i, _len;
    lists = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = new RelPathList();
    for (_i = 0, _len = lists.length; _i < _len; _i++) {
      list = lists[_i];
      result.include(list);
    }
    return result;
  };

  RelPathList.isSkippedLine = function(line) {};

  RelPathList.parseLine = function(list, line) {
    var dir, directoriesOnly, name;
    line = line.trim();
    if (line[0] === '!') {
      return new RelPathNotList(RelPathList.parseLine(line.substr(1)));
    }
    directoriesOnly = false;
    if (line.endsWith('/')) {
      directoriesOnly = true;
      line = line.to(-1);
    }
    if (line.indexOf('/') >= 0) {
      name = RelPath.basename(line);
      dir = RelPath.dirname(line);
      return new RelPathDirList(name, directoriesOnly, dir);
    } else {
      return new RelPathNameList(line, directoriesOnly);
    }
  };

  RelPathList.parse = function(lines) {
    var line, result, _i, _len;
    if (typeof lines === 'string') {
      lines = [lines];
    }
    result = new RelPathList();
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      line = line.trim();
      if (!line || line[0] === '#') {
        continue;
      }
      if (line[0] === '!') {
        line = line.substr(1);
        result.exclude(RelPathSpec.parseGitStyleSpec(line));
      } else {
        result.include(RelPathSpec.parseGitStyleSpec(line));
      }
    }
    return result;
  };

  module.exports = RelPathList;

}).call(this);
