// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, Path, StarList, TreeStream, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Path = require('path');

  fs = require('fs');

  EventEmitter = require('events').EventEmitter;

  StarList = {
    membership: function(path, isDir) {
      return true;
    }
  };

  module.exports = TreeStream = (function(_super) {

    __extends(TreeStream, _super);

    function TreeStream(list) {
      this.list = list != null ? list : StarList;
      this.depth = 0;
    }

    TreeStream.prototype.enter = function() {
      return ++this.depth;
    };

    TreeStream.prototype.leave = function() {
      if (--this.depth === 0) {
        return this.emit('end');
      }
    };

    TreeStream.prototype.visit = function(root) {
      return this._visit(root, '');
    };

    TreeStream.prototype._visit = function(root, path) {
      var absPath,
        _this = this;
      this.enter();
      absPath = Path.join(root, path);
      fs.stat(absPath, function(err, stats) {
        var _ref;
        if (err) {
          _this.emit('error', err);
        } else {
          if (stats.isDirectory()) {
            if (((_ref = _this.list) != null ? _ref.membership(path, true) : void 0) !== false) {
              _this._traverse(root, path, absPath);
            }
          } else {
            if (!_this.list || _this.list.membership(path, false) === true) {
              _this.emit('file', path, absPath);
            }
          }
        }
        return _this.leave();
      });
      return this;
    };

    TreeStream.prototype._traverse = function(root, parent, absParent) {
      var _this = this;
      this.enter();
      this.emit('folder', parent, absParent);
      return fs.readdir(absParent, function(err, names) {
        var name, _i, _len;
        if (err) {
          _this.emit('error', err);
        } else {
          for (_i = 0, _len = names.length; _i < _len; _i++) {
            name = names[_i];
            _this._visit(root, Path.join(parent, name));
          }
        }
        return _this.leave();
      });
    };

    return TreeStream;

  })(EventEmitter);

}).call(this);
