// Generated by CoffeeScript 1.3.3
(function() {
  var RelPathSpec, assert, o, tests;

  assert = require('assert');

  RelPathSpec = require('../index').RelPathSpec;

  tests = [];

  o = function(spec, examples) {
    return tests.push([spec, examples]);
  };

  o('foo.txt', ['foo.txt', '!bar.txt', '!bar.txt/another.js']);

  o('*.txt', ['foo.txt', '!some/dir/foo.txt', '!foo.js']);

  o('*', ['qwerty.txt', '!some/dir/qwerty.txt']);

  o('**', ['qwerty.txt', 'dir/qwerty.txt', 'some/dir/qwerty.txt']);

  o('**/*', ['qwerty.txt', 'dir/qwerty.txt', 'some/dir/qwerty.txt']);

  o('some/dir/*', ['some/dir/qwerty.txt', '!some/dir', '!some/dir/subdir/qwerty.txt', '!elsewhere/qwerty.txt']);

  o('/some', ['some', '!some/qwerty.txt', '!another/qwerty.txt']);

  o('/some/**', ['some', 'some/qwerty.txt', '!another/qwerty.txt']);

  o('foo.txt/**', ['foo.txt', '!bar.txt', '!some/dir/foo.txt', 'foo.txt/another.js']);

  o('**/foo.txt', ['foo.txt', '!bar.txt', 'some/dir/foo.txt', '!foo.txt/another.js']);

  o('**/foo.txt/**', ['foo.txt', '!bar.txt', 'some/dir/foo.txt', 'foo.txt/another.js', 'some/dir/foo.txt/another.js']);

  o('foo/**/bar.txt', ['foo/bar.txt', 'foo/dir/bar.txt', 'foo/some/dir/bar.txt', '!some/dir/bar.txt', '!foo/another.txt', '!foo/some/dir/another.txt']);

  o('foo/**/boz/**/bar.txt', ['foo/boz/bar.txt', 'foo/some/boz/bar.txt', 'foo/boz/some/bar.txt', 'foo/some/boz/dir/bar.txt', 'foo/many/extra/boz/dir/components/bar.txt', '!foo/bar.txt', '!foo/dir/bar.txt', '!foo/some/dir/bar.txt', '!some/sub/boz/dir/bar.txt', '!foo/sub/boz/another.txt']);

  describe("RelPathSpec", function() {
    var examples, specStr, _fn, _i, _len, _ref;
    _fn = function(specStr, examples) {
      return describe("like '" + specStr + "'", function() {
        var example, spec, _j, _len1, _results;
        spec = RelPathSpec.parse(specStr);
        _results = [];
        for (_j = 0, _len1 = examples.length; _j < _len1; _j++) {
          example = examples[_j];
          _results.push((function(example) {
            if (example[0] === '!') {
              example = example.substr(1);
              return it("should not match '" + example + "'", function() {
                return assert.ok(!spec.matches(example));
              });
            } else {
              return it("should match '" + example + "'", function() {
                return assert.ok(spec.matches(example));
              });
            }
          })(example));
        }
        return _results;
      });
    };
    for (_i = 0, _len = tests.length; _i < _len; _i++) {
      _ref = tests[_i], specStr = _ref[0], examples = _ref[1];
      _fn(specStr, examples);
    }
    return describe(".parseGitStyleSpec", function() {
      o = function(spec, original) {
        return it("should parse '" + spec + "' as if it was '" + original + "'", function() {
          return assert.equal(RelPathSpec.parseGitStyleSpec(spec).toString(), original);
        });
      };
      o('foo', '**/foo/**');
      o('/foo', 'foo/**');
      o('foo/**', 'foo/**');
      o('foo/bar', 'foo/bar/**');
      o('/foo/bar', 'foo/bar/**');
      o('foo/bar/**', 'foo/bar/**');
      return o('foo/**/bar', 'foo/**/bar/**');
    });
  });

}).call(this);
