/**
 * Created by exolution on 17/1/4.
 */
const Locator = require('./locator');
const childProcess = require('child_process');
const Transform = require('stream').Transform;
const Argv = require('./Argv');
const pathTool = require('path');
class Command {
    constructor(command, location, args = [], description) {
        this.command = command;
        let [schema,loc]=location.split(':');
        this.schema = schema;
        this.location = loc;
        if (typeof args === 'string') {
            args = args.split(' ');
        }
        this.argv = new Argv(args);
        this.description = description;
    }

    run() {
        return Locator.getInstance(this.schema).locate(this.location).then((dependency)=> {
            this.dependency=dependency;
            let argv=new Argv(process.argv);
            if(argv.help) {
                return this.spawnStart(dependency);
            }
            else{
                return this.immediateStart(dependency)
            }
        });
        /* let proc=childProcess.exec('tnpm install chalk',function(err,stdout,stderr){

         });
         proc.stdout.pipe(process.stdout);
         proc.stderr.pipe(process.stderr);*/
        //require(this.location)
    }

    immediateStart(dependency) {
        process.argv[1] = dependency.path;
        if (this.command) {
            let idx = process.argv.indexOf(this.command);
            process.argv.splice.apply(process.argv, [idx, 1].concat(this.argv._params));
            process.argv = process.argv.concat(this.argv._options.map(e=>e.text));

        }
        require(dependency.path);
    }

    spawnStart(dependency) {

        let idx = this.command?process.argv.indexOf(this.command):1;

        let args = process.argv.slice(idx + 1).concat(this.argv._params).concat(this.argv._options.map(e=>e.text));
        let child;
        if(!dependency.packageName){
            child=childProcess.spawn('node',[dependency.path].concat(args));
        }
        else{
            child=childProcess.spawn(dependency.path,args,{

            });
        }
        child.stderr.pipe(process.stderr);
        if (dependency.packageName) {
            let depCmd = pathTool.basename(dependency.path,pathTool.extname(dependency.path));
            let thisCmd = pathTool.basename(process.argv[1], pathTool.extname(process.argv[1]))+' '+this.command;
            let handler = new Transform();
            handler._transform = function (chunk, enc, callback) {
                let newChunk=chunk.toString().replace(new RegExp(depCmd, 'g'), thisCmd);
                this.push(newChunk);
                callback();
            };
            child.stdout.pipe(handler).pipe(process.stdout);
        }
        else{
            child.stdout.pipe(process.stdout);
        }


    }


}
module.exports = Command;
