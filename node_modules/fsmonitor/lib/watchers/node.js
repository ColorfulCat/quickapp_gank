// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var EventEmitter, NodeWatcher, Path, debug, fs, iced, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('fsmonitor');

  fs = require('fs');

  Path = require('path');

  EventEmitter = require('events').EventEmitter;

  module.exports = NodeWatcher = (function(_super) {
    __extends(NodeWatcher, _super);

    function NodeWatcher(root) {
      this.root = root;
      this._watchers = {};
      this._broken = {};
    }

    NodeWatcher.prototype.close = function() {
      var relpath, watcher, _ref;
      _ref = this._watchers;
      for (relpath in _ref) {
        if (!__hasProp.call(_ref, relpath)) continue;
        watcher = _ref[relpath];
        watcher.close();
      }
      return this._watchers = null;
    };

    NodeWatcher.prototype.addFolder = function(relpath) {
      var _base;
      return (_base = this._watchers)[relpath] || (_base[relpath] = (function(_this) {
        return function() {
          var error, watcher;
          try {
            watcher = fs.watch(Path.join(_this.root, relpath));
          } catch (_error) {
            error = _error;
            return _this._addFolderError(relpath, error);
          }
          watcher.on('change', function(event, filename) {
            debug("fs.watch incoming change: event = %j, filename = %j", event, filename);
            return _this.emit('change', relpath, filename, false);
          });
          watcher.on('error', function(error) {
            return _this._addFolderError(relpath, error);
          });
          return watcher;
        };
      })(this)());
    };

    NodeWatcher.prototype.removeFolder = function(relpath) {
      if (this._watchers.hasOwnProperty(relpath)) {
        this._watchers[relpath].close();
        delete this._watchers[relpath];
        return delete this._broken[relpath];
      }
    };

    NodeWatcher.prototype._addBroken = function(broken) {
      this._broken[broken.relpath] = broken;
      return debug("broken folder: " + (JSON.stringify(broken, null, 2)) + "\n");
    };

    NodeWatcher.prototype._addFolderError = function(relpath, error) {
      var broken, exists, fullPath, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fullPath = Path.join(this.root, relpath);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "c:\\Users\\saita\\Documents\\program\\fsmonitor.js\\lib\\watchers\\node.iced",
            funcname: "NodeWatcher._addFolderError"
          });
          fs.exists(fullPath, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return exists = arguments[0];
              };
            })(),
            lineno: 50
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!exists) {
            return;
          }
          broken = {
            code: 'EFAIL',
            message: "Error monitoring folder '[path]'",
            error: error,
            relpath: relpath,
            fullPath: fullPath,
            expected: false
          };
          if (error.code === 'EPERM') {
            broken.code = 'EPERM';
            broken.expected = true;
            broken.message = "No permission to access folder '[path]'";
          }
          _this._addBroken(broken);
          return void 0;
        };
      })(this));
    };

    return NodeWatcher;

  })(EventEmitter);

}).call(this);
