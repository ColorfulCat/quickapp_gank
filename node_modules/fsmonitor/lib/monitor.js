// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var EventEmitter, FSMonitor, FSTree, Watcher,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  FSTree = require('./tree');

  Watcher = require('./watchers/node');

  module.exports = FSMonitor = (function(_super) {
    __extends(FSMonitor, _super);

    function FSMonitor(root, filter, options) {
      this.root = root;
      this.filter = filter;
      this.tree = new FSTree(this.root, this.filter);
      this.tree.once('complete', this._finishInitialization.bind(this));
      this.tree.on('change', this._processChange.bind(this));
      this._closed = false;
    }

    FSMonitor.prototype.close = function() {
      var _ref;
      this._closed = true;
      if ((_ref = this.watcher) != null) {
        _ref.close();
      }
      return this.watcher = null;
    };

    FSMonitor.prototype._finishInitialization = function() {
      var folder, _i, _len, _ref;
      this.watcher = new Watcher(this.root);
      this.watcher.on('change', (function(_this) {
        return function(folder, filename, recursive) {
          if (_this._closed) {
            return;
          }
          return _this.tree.update(folder, filename, recursive);
        };
      })(this));
      _ref = this.tree.allFolders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        folder = _ref[_i];
        this.watcher.addFolder(folder);
      }
      return this.emit('complete');
    };

    FSMonitor.prototype._processChange = function(change) {
      var folder, _i, _j, _len, _len1, _ref, _ref1;
      if (this._closed) {
        return;
      }
      _ref = change.addedFolders;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        folder = _ref[_i];
        this.watcher.addFolder(folder);
      }
      _ref1 = change.removedFolders;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        folder = _ref1[_j];
        this.watcher.removeFolder(folder);
      }
      return this.emit('change', change);
    };

    return FSMonitor;

  })(EventEmitter);

}).call(this);
